Aquí se guardarán los avances que se vayan haciendo, explicaciones, links a articulos consultados... 

**********************************2/11/2017******************************************
El robot recalcula su posición cada 20 milisegundos a partir de la información que recibe, por lo que cada 20 milisegundos o menos 
es necesario que reciba una instrucción para que siga la trayectoria.

**********************************9/11/2017******************************************
Desarrollo de software evolutivo, exploratorio. Partimos de unos requisitos iniciales básicos, los desarollamos,
los completamos y nos ponemos unos nuevos requisitos en base a lo desarrollado en la etapa anterior.
https://ossielniembrogarcia.wordpress.com/tag/modelo-espiral/

Calendario
Diciembre>Deteccion de la línea bajo diferentes entornos(iluminacion, color, saturación).
Enero>Medir el error respecto del centro de la línea para saber si nos estamos desviando.
Febrero>Obtener la ecuación que nos permita determinar la trazada en las curvas.
Abril>Conectar el programa con las librerías necesarias para guiar el robot.
Marzo>Hacer pruebas.

***********************************12/11/2017*****************************************
Organización de repositorio
Creacion de un código que permite obtener el streaming generado por la aplicacion IPWebcam en un dispositivo android.
La idea es poder transmitir lo que ve la camara situada en el robot a un dispositivo más potente, via inalambrica, 
para ejecutar los diferentes algoritmos que nos permitiran mandar instrucciones de vuelta al robot.
He creado una red lan con un router viejo, para aislar las comunicaciones y obtener todo el rendimiento posible,
además el ordenador está conectado via ethernet al router.

Resolución 800x600. 
Calidad streaming > min,max,media fps.
100             >   1.43, 6.85, 3.82
75              >   4.67, 16.13, 11.49
50              >   2.15, 19.23, 12.04

Resolución 640x480.
Calidad streaming > min,max,media fps.
100             >  2.28, 7.3, 5.57
75              >  1.07, 23.26, 15.73
50              >  2.47, 22.73, 16.13

Resolución 176x144.
Calidad streaming > min,max,media fps.
20                > 5.26,200.00, 58.20

Entre el ajuste 50 y 75 apenas se pierden fps, y la imagen mejora considerablemente.
El cambio de resolucion nos limita el ancho que podemos ver, para curvas cerradas puede ser un problema.
Por debajo de 50 pierde mucha calidad, por lo que es improducente probarlo si despúes no se va a poder usar.
Sería conveniente encontrar la forma de medir el bitrate, ya que el parametro de calidad dentro de la app limita la funcioalidad
en caso de que se quiera usar otro elemento de streaming.
En la prueba de resolucion a 176x144 y calidad 20 podemos ver como para obtener una tasa de 50 fps (un fps cada 20 milisegundos),
necesitamos bajar la calidad y resolucion del streaming radicalmente. Veremos en las pruebas de binarizacion como se comporta 
cada streaming.

***************************19/11/2017****************************************
Creo una "caja de herramientas" para almacenar los diferentes algoritmos que vaya haciendo
relacionados con binarizacion y procesamiento de imagenes. Archivo toolbox.py

Lo primero que necesito para poder realizar las pruebas de binarizacion es ser capaz de medir
la luminosidad que esta capturando mi camara. 
Para ello necesito capturar la luminosidad de una imagen rgb.
He encontrado resuelta mi duda en el foro de OpenCV, la pongo en practica
http://answers.opencv.org/question/66874/how-to-get-luminosity-from-the-camera-android/
He creado en toolbox.py el metodo calcular_luminosidad, que la calcula segun el ejemplo anterior.
Para probar que efectivamente funciona, he creado un archivo de prueba llamado test_luminosidad.py
En el video TestLuminosidad.avi, en la carpea Documentacion/Videos/PruebaLuminosidad, 
podemos ver como efectivamente es capaz de medir la luminosidad este metodo, cuando la luminosidad es baja,
el metodo nos devuelve resultados cercanos a 0, mientras que segun aumenta,
ha llegado a dar un valor de 148 (con luz artificial, una lampara de led).

Documentacion de los algoritmos de binarizacion de OpenCV. 
Los algoritmos estan documentados en la clase toolbox, y se pueden llamar desde funciones de esta clase.
https://docs.opencv.org/3.3.1/d7/d4d/tutorial_py_thresholding.html
https://docs.opencv.org/2.4.8/modules/imgproc/doc/miscellaneous_transformations.html
https://docs.opencv.org/2.4.8/modules/imgproc/doc/miscellaneous_transformations.html#threshold

 ************************23/11/2017********************************
Pruebas de binarizacion.
Posicion de la camara respecto del suelo: 55º de inclinación, 8cm de altura respecto del suelo.
La camara es capaz de ver a una distancia de 37 cm.
Fondo blanco: folios.
Material de la cinta: cinta aislante negra mate.

Parametros del streaming:
Resolución 176x144, calidad del streaming 20.

-- Umbral fijo.
Umbral de 147, los valores que superan ese umbral, so binarizaran como 0, los que sean inferiores como 1.
Recordemos que estamos usando la funcion de binarizacion inversa, lo que buscamos es que únicamente la linea 
quede de color blanco.
- Luminosidad: 183.96
- Fps: 
    min     Max      avg
    5.52    200.0    55.50
- Resultado: el programa consigue binarizar correctamente la línea. Conseguimos distinguir perfectamente la linea
del fondo. 
- Ventajas:el umbral fijo requiere menos tiempo de ejecución que las otras opciones, puesto que 
solo tiene que hacer comparaciones y devolver valores.
- Desventajas: el umbral es fijo, por lo que no en todas las situaciones va a funcionar correctamente.

-- Umbral adaptativo media.
Tamaño de vecindario 20, constante para calculo de la media: 7
Usamos binarizacion inversa, lo que buscamos es que únicamente la linea quede de color blanco.
- Luminosidad: 183.38
- Fps: 
    min     Max      avg
    1.58    199.99   56.41
- Resultado: el programa no consigue binarizar correctamente la imagen. 
Aparecen puntos negros y manchas negras donde no deberia haberlos, 
y tambien aparecen manchas blancas donde no deberia haberlas.
Este algoritmo con estos parametros no se puede usar.

-- Umbral adaptativo gausiano.
Tamaño de vecindario 20, constante para calculo de la media: 7
Usamos binarizacion inversa, lo que buscamos es que únicamente la linea quede de color blanco.
- Luminosidad: 183.16
- Fps: 
    min     Max      avg
    2.38   200.00   56.17
- Resultado: el programa no consigue binarizar correctamente la imagen. 
Aparecen puntos negros y manchas negras donde no deberia haberlos, 
y tambien aparecen manchas blancas donde no deberia haberlas.
Este algoritmo con estos parametros no se puede usar.


-- Umbral calculado según el algoritmo de Otsu.
El algoritmo de Otsu no recibe más parametros que el video
y el valor que se debe de poner a los pixeles que estan por encima del umbral.
El umbral se calcula para cada fotograma del video.
- Luminosidad: 182.86
- Fps: 
    min     Max      avg
    5.05   166.67   56.94
- Umbral de Otsu: 118.0
- Resultado: el programa es capaz de binarizar correctamente la imagen. 
Además es capaz de calcular el umbral en funcion de la luminosidad de la imagen,
lo que nos proporciona mucha versatilidad en cuanto a poder usar este programa en 
diferentes entornos, o entornos con condiciones cambiantes.
Es un buen candidato para seguir avanzando en el proyecto.
- Ventajas: permite calcular el umbral en funcion de cada imagen, lo cual permite que funcione
en entornos cambiantes.
- Desventajas: necesita un tiempo extra de ejecución para calcular el umbral. Aunque esto
no se ve reflejado en los resultados obtenidos, puesto que los fps son muy similares 
al caso del umbral fijo.


************************************12/02/18*************************************************
Funcion para calcular el ancho de la linea en cualquier zona de la imagen,
teniendo en cuenta la distorsión por perspectiva.
Voy a usar la herramienta online https://www.rapidtables.com/web/tools/pixel-ruler.html
para tomar medidas en pixeles sobre la imágen real.
Primero compruebo que la resolución coincide con la que estoy usando en el streaming de video.
Despues mido el máximo y mínimo ancho de la línea.
Max: 56px
Min: 13px
He de calcularlo en la imagen real, ya que los algoritmos de binarizacion pueden modificar 
el ancho de la línea, mediante funciones de dilatación o reducción.
Esto me permite calcular mediante una regla de 3 el factor de reduccion del ancho de la línea.
Disminución de pixeles: 56px-13px = 43px
La linea ha disminuido su ancho en 43px. 
La resolución de la imágen es de 176x144. 
Por tanto, ha disminuido 43 pixeles en los 144 pixeles de alto que tiene la imágen.
Entonces, para cada fila de pixeles de la imagen, cada fila de esas 144 filas, tendrá
que disminuir: 43/144 = 0.298 pixel/fila

Ahora para calcular cuanto debería de tener la linea de ancho en una zona de la imagen,
basta con multiplicar el factor pixel/fila, por el número de fila, y restarle el resultado al máximo.
Veamos: 
    - Sí estamos en la fila 0, 0 * 0.298 = 0 -> 56 - 0 = 56px. Correcto
    - En la fila 144, 144*0.298 = 43 -> 56 - 43 = 13px. Correcto
    - En la fila 70, 70*0.298 = 21 -> 56 - 21 = 35 Correcto

Pruebas y medidciones de error

Otsu (Porcentaje entre medida calculada y medida real)
Luminosidad/Fila        10          50           100          130
51                      7.69%       15.38%      8.18%          1.05%
71                      3.74%       2.26%       8.18%          4.76%
125                     0.026%      0.16%       8.18%          1.05%
161                     0.026%      0.16%       4.35%          1.05%

En esta tabla podemos ver como contra mas luminosidad tenemos, 
el programa es capaz de ver mejor la linea, llegando a tener 
una precisión muy alta.


********************* 14/03/2018 **************************
La anterior función de medida del error es muy  estricta en cuanto a que la linea
sobre la que se mide el error y calcula la distorsión por perspectiva tiene que 
ser perfectamente recta y perpendicular a la camara, lo cual no va a pasar siempre.

Voy a crear una función que me devuelva el coeficiente de reduccion que se genera
debido al angulo que esta la camara sobre el suelo. La funcion usará una plantilla 
con un cuadrado sobre fondo blanco para poder medir este coeficiente, y despues poderlo
usar con cualquier tipo de linea, curva, recta, diagonal...

La plantilla se ha de colocar recta a la camara (contra más recta mejor), 
y con la linea guia hacia el lado de la camara y que no aparezca en la imagen. 
El cuadrado debe de quedar centrado en la imagen, aunque no es necesario que 
este estrictamente en el centro, basta con centrarlo a ojo. La funcion encontrará
el rectangulo partiendo de la parte de abajo de la imagen, tomará sus medidas, y 
sabiendo que sus porporciones deberian de ser iguales, calculará el coeficiente.

Angulo    coeficiente
0           0.014
20          0.254
30          0.393
35          0.482
40          0.506
50          0.550
55          0.576
60          0.613
70          0.625

La relación angulo-coeficiente puede ser útil en un futuro, aunque ahora de momento
solo voy a trabajar con el coeficiente.

********************************* 19/03/2018*****************************************
He conseguido implementar una función para resolver la distorsión por perspectiva.
Lo que hace es reducir el ancho de la imagen en la parte inferior hasta corregir la 
perspectiva y hacer que parezca "vista de pajaro". Para calcular esta reduccion, uso 
el coeficiente que me generaba mi anterior funcion, pero al parecer este coeficiente 
no es el correcto, o necesita algun ajuste, ya que no es capaz de corregir perfectamente 
la distorsión. Con el coeficiente se calcula el número de pixeles a reducir en la parte 
inferior de la imagen, y por lo que he podido comprobar, no lo hace bien. He probado a 
modificar el parametro dentro de la funcion y para un angulo concreto he conseguido 
corregir perfectamente la distorsión. 
El siguiente paso es revisar la funcion que me genera este coeficiente.


******************************* 9/4/2018 *********************************************
Los pixeles que se necesitan reducir en la imagen para poder resolver la distorsion por
perspectiva no tienen una ecuacion lineal simple, a si que a partir de unos puntos obtenidos
manualmente, voy a obtener una ecuacion aproximada que me permita generar los pixeles a reducir
en función del angulo de la cámara.

Angulo    coeficiente   Pixeles a reducir
40          0.506           100px
45          0.530           105px
50          0.550           110px
55          0.576           135px
60          0.613           140px

Ecuacion generada con la herramienta: https://mycurvefit.com/

y = 140.3462 + (101.7432 - 140.3462)/(1 + (x/0.5605076)^64.36072)

Usando esta funcion como una funcion lambda podemos obtener fácilmente los pixeles a reducir.


******************************* 22/04/2018 *************************************************
Implementado y probado métodos para detectar el borde de la linea binarizada.
Intento de deteccion de las lineas mediante Hough, pero sin exito.
He conseguido separar ambos bordes de la linea, y el siguiente paso es usar regresion lineal
en cada borde, para obtener un polinomio que se adapte a la línea, de tal forma que pueda obtener
los dos bordes perfectamente definidos para operar con ellos.


***************************** 09/05/2018 ***************************************************
Obtencion de la trayectoria, linea que esta en la mitad exacta de los dos bordes.
Primera aproximacion del sistema de guiado. Una vez tenemos la trayectoria, podemos saber
si el vehiculo esta a la derecha o a la izquierda de esta, y corregir la trayectoria. 
Implementado un sistema de correcion dinamico, permite definir el angulo que el vehiculo 
deberia girar para corregir la trayectoria. Así, evitamos giros bruscos.
Inclusion de algunos gráficos para agrupar ventanas.

En el video de sistema de guiado, podemos ver como cuando la trayectoria (linea central) se encuentra
en el centro de la imagen, el programa nos indica que podemos seguir recto, girando la direccion
un angulo de 0. La funcion de guiado soporta un marjen de error, con el parametro error, de 0 a 1.
0 para que no haya marjen de error y el programa nos corrija siempre, 1 para que no nos corrija nunca.
Lo que hace es calcular el porcentaje del ancho de la imagen, y establecerlo como zona de error al 
centro de esta. Por ejemplo, para una imagen de 100px de ancho, y un error de 0.1, nos creará una
zona de error entre las columnas de pixel 40 y 60. Mientras la trayectoria se mantenga dentro de esta zona
el programa nos dira que sigamos recto. En cuanto nos salimos de la zona del marjen de error que dejemos, el programa nos empezará
a corregir. Bien indicando que giremos a la izquierda o a la derecha, y el angulo con el que lo tenemos que
hacer. Tambien nos muestra un indicador, R para Recto, RI, para recto izquierda, RD, para recto derecha,
I para izquierda, y D para derecha. D e I solo surjen cuando estamos en una situacion muy limite, casi 
saliendose la trayectoria de la imagen.


********************** 10/05/2018 *************************************************
Puesto que en un entorno real es muy dificl encontrarnos con una linea negra 
sobre un fondo completamente blanco. Voy a intentar binarizar por color, usando
una linea de un color llamativo. De esta forma da igual que fondo usemos, mientras
que no tenga elementos del mismo color que la linea.